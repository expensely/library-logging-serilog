name: 'Pull request: pushed'

on:
  pull_request:
    branches-ignore:
      - main

env:
  artifact-name: Website

concurrency:
  cancel-in-progress: false
  group: pull-request-${{ github.ref_name }}

jobs:
  generate-version:
    name: Generate Version
    runs-on: ubuntu-latest
    outputs:
      assembly-sem-ver: ${{ steps.get-version.outputs.assembly-sem-ver }}
      assembly-sem-file-ver: ${{ steps.get-version.outputs.assembly-sem-file-ver }}
      commit-by: ${{ steps.get-version.outputs.commit-by }}
      commit-date: ${{ steps.get-version.outputs.commit-date }}
      commit-id: ${{ steps.get-version.outputs.commit-id }}
      nuget-version-v2: ${{ steps.get-version.outputs.nuget-version-v2 }}
      sem-ver: ${{ steps.get-version.outputs.sem-ver }}
    steps:
      - uses: actions/checkout@v4
        name: Checkout
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Get version
        uses: gavanlamb/github-actions/.github/actions/version/get@main
        id: get-version
        env:
          BUILD_NUMBER: ${{ github.run_number }}

  build-package:
    name: Build Package
    runs-on: ubuntu-latest
    needs:
      - generate-version
    steps:
      - uses: actions/checkout@v4
        name: Checkout
        with:
          fetch-depth: 0
          fetch-tags: true

      # Restore packages
      - name: Restore
        run: dotnet restore --no-cache src/Logging.Serilog/Logging.Serilog.csproj
      - name: Install dotnet outdated
        run: dotnet tool update dotnet-outdated-tool -g
      - name: Check outdated packages
        id: dotnet-outdated
        run: |
          mkdir -p artifacts/outdated
          dotnet outdated --output-format Markdown --output artifacts/outdated/outdated.md
          FILE="artifacts/outdated/outdated.md"
          if [ -e "$FILE" ]; then
            OUTPUT=$(cat "$FILE")
            echo "output<<EOF" `>> $GITHUB_OUTPUT`
            echo "$OUTPUT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "output=## No Outdated Packages" >> $GITHUB_OUTPUT
          fi
      - uses: mshick/add-pr-comment@v2
        name: Add dotnet outdated comment to PR
        if: ${{ github.event_name == 'pull_request' }}
        with:
          message: |
            ${{ steps.dotnet-outdated.outputs.output }}
          message-id: dotnet-outdate-${{ github.head_ref }}

      # Lint
      - name: Lint
        if: ${{ github.event_name == 'pull_request' }}
        uses: zyactions/dotnet-lint@v1
        with:
          workspace: Logging.Serilog.sln
          implicit-restore: false

      # Build
      - name: Build
        run: dotnet build --no-restore --configuration Release /p:AssemblyVersion=${{ needs.generate-version.outputs.assembly-sem-ver }} /p:FileVersion=${{ needs.generate-version.outputs.assembly-sem-file-ver }} /p:PackageVersion=${{ needs.generate-version.outputs.nuget-version-v2 }} /p:Version=${{ needs.generate-version.outputs.sem-ver }}

#      # Run Unit tests
#      - name: Test
#        run: dotnet test --collect:"XPlat Code Coverage" --no-build --configuration Release --results-directory ./tests/results/Logging.Serilog/ tests/Logging.Serilog.UnitTests/Logging.Serilog.UnitTests.csproj --settings tests/default.runsettings
#
#      # Publish Test Results
#      - name: Publish Unit Test Results
#        uses: EnricoMi/publish-unit-test-result-action@v2
#        with:
#          files: |
#            ./tests/results/Logging.Serilog/*.trx
#      # Generate Coverage Report
#      - name: Download Coverage History
#        uses: joutvhu/download-s3@v1
#        with:
#          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws_region: ap-southeast-2
#          aws_bucket: gavanlamb-github-actions-assets
#          source: ${{ github.repository }}/main/history
#          target: coverage/history
#
#      - name: Generate Coverage Report
#        uses: danielpalme/ReportGenerator-GitHub-Action@5.2.2
#        with:
#          reports: ./tests/results/Logging.Serilog/**/coverage.cobertura.xml
#          targetdir: coverage/reports
#          historydir: coverage/history
#          reporttypes: Html;MarkdownSummaryGithub;Badges
#          sourcedirs: ./
#          assemblyfilters: '+*' # Optional list of assemblies that should be included or excluded in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed.
#          classfilters: '+*' # Optional list of classes that should be included or excluded in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed.
#          filefilters: '+*' # Optional list of files that should be included or excluded in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed.
#          verbosity: 'Info' # The verbosity level of the log messages. Values: Verbose, Info, Warning, Error, Off
#          title: ${{ steps.version.outputs.NuGetPackageVersion }}
#          tag: ${{ steps.version.outputs.NuGetPackageVersion }}
#          license: ${{ secrets.REPORT_GENERATOR_LICENSE }}
#          customSettings: settings:maximumNumberOfHistoricCoverageFiles=100;settings:createSubdirectoryForAllReportTypes=true
#          #plugins: '' # Optional plugin files for custom reports or custom history storage (separated by semicolon).
#          # TODO add plugin for uploading to S3
#
#      - name: Push Coverage Assets
#        uses: shallwefootball/s3-upload-action@master
#        with:
#          aws_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws_bucket: gavanlamb-github-actions-assets
#          source_dir: coverage/reports
#          destination_dir: ${{ github.repository }}/${{ github.head_ref }}/coverage
#
#      - name: Push Coverage Report History
#        uses: shallwefootball/s3-upload-action@master
#        if: ${{ github.base_ref == 'main' }}
#        with:
#          aws_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws_bucket: gavanlamb-github-actions-assets
#          source_dir: coverage/history
#          destination_dir: ${{ github.repository }}/${{ github.head_ref }}/coverage/history
#
#      # Mutation test
#      - name: Install Stryker
#        run: dotnet tool install dotnet-stryker -g
#      - name: Run Stryker
#        run: dotnet stryker --output mutation --config-file stryker-config.json --version "${{ github.head_ref }}" --dashboard-api-key "${{ secrets.STRYKER_API_KEY }}"
#      - name: Push Mutation Report
#        uses: shallwefootball/s3-upload-action@master
#        with:
#          aws_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws_bucket: gavanlamb-github-actions-assets
#          source_dir: mutation/reports
#          destination_dir: ${{ github.repository }}/${{ github.head_ref }}/mutation
#
#      # Pack
#      - name: Pack
#        run: dotnet pack --no-build --configuration Release src/Logging.Serilog/Logging.Serilog.csproj --output src/Logging.Serilog/bin/Release/Packed # /p:AssemblyVersion=${{ steps.version.outputs.AssemblyVersion }} /p:FileVersion=${{ steps.version.outputs.AssemblyFileVersion }} /p:PackageVersion=${{ steps.version.outputs.NuGetPackageVersion }} /p:Version=${{ steps.version.outputs.Version }}
#      - name: Archive NuGet Package
#        uses: actions/upload-artifact@v4
#        with:
#          name: NuGet Package
#          path: src/Logging.Serilog/bin/Release/Packed

  build-website:
    name: Build Website
    runs-on: ubuntu-latest
    needs:
      - generate-version
    steps:
      - uses: actions/checkout@v4
        name: Checkout
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Install node
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - name: Install NPM packages
        shell: bash
        run: |
          npm ci
        working-directory: docs
      - name: Build
        shell: bash
        run: |
          npm run build:production
        working-directory: docs
      - name: Generate version file
        shell: bash
        run: |
          JSON_STRING=$(jq -n \
            --arg commit-by "${{ needs.generate-version.outputs.commit-by }}" \
            --arg commit-date "${{ needs.generate-version.outputs.commit-date }}" \
            --arg commit-id "${{ needs.generate-version.outputs.commit-id }}" \
            --arg version "${{ needs.generate-version.outputs.sem-ver }}" \
            '$ARGS.named')

          echo "$JSON_STRING" | jq . > "public/version.json"
        working-directory: docs
      - name: Create directories
        shell: bash
        run: |
          mkdir -p docs/public/badges
      - name: Create badge for site version
        uses: emibcn/badge-action@v2.0.2
        with:
          label: Site version
          status: ${{ needs.generate-version.outputs.sem-ver }}
          path: docs/public/badges/version.svg
      - name: Archive site
        uses: gavanlamb/github-actions/.github/actions/archive@main
        with:
          artifact-name: ${{ env.artifact-name }}
          source-directory: docs/public
          destination-directory: docs
      - name: Send message
        uses: gavanlamb/github-actions/.github/actions/slack/built@main
        if: always()
        with:
          slack-webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          version: ${{ needs.generate-version.outputs.sem-ver }}
          status: ${{ job.status }}
          include-integration-tests: 'false'
          include-unit-tests: 'false'

  preview:
    name: Preview
    runs-on: ubuntu-latest
    needs: 
     - build-package
     - build-website
    env:
      site-path: ${{ github.repository }}/release/preview${{ github.event.pull_request.number }}/site
    environment: 
      url: https://gavanlamb-github-actions-assets.s3.ap-southeast-2.amazonaws.com/${{ env.site-path }}/index.html
      name: Preview${{ github.event.pull_request.number }}
    steps:
      - name: Deploy ${{ env.artifact-name }}
        uses: gavanlamb/github-actions/.github/actions/hugo/deploy-to-s3@main
        with:
          artifact-name: ${{ env.artifact-name }}
          artifact-directory: site
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-s3-bucket: ${{ vars.AWS_S3_CICD_BUCKET }}
          aws-s3-path: ${{ env.site-path }}
          aws-s3-region: ${{ vars.AWS_DEFAULT_REGION }}
      - name: Send message
        uses: gavanlamb/github-actions/.github/actions/slack/released@main
        if: always()
        with:
          environment: Preview${{ github.event.pull_request.number }}
          include-system-tests: 'false'
          slack-webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          status: ${{ job.status }}
          version: ${{ needs.generate-version.outputs.sem-ver }}
